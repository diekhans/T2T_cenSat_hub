import os
from os import path as osp
import glob
import shutil
import tempfile
from pycbio.sys import fileOps
import pipettor

asmName = "cenSat1"

# must create cenSat1.seqs with the list of contigs

resultsDir = "/nanopore/markd/t2t-centromere/T2T_cenSat"

##
# output directories
##
hubDir = osp.join(resultsDir, "hub")
dataDir = osp.join(resultsDir, "data")
asmHubDir = osp.join(hubDir, asmName)

asmSrcDir = "/public/groups/nanopore/karen/chm13/cenSat_WG/assembly"

##
# hub files
##
hubSrcDir = "../../hub"
def findHubFiles():
    prelen = len(Path(hubSrcDir).parts)
    return [osp.join(*p.parts[prelen:])
            for  p in (list(Path(hubSrcDir).rglob("*.txt"))
                       + list(Path(hubSrcDir).rglob("*.html")))]
hubFiles = findHubFiles()
hubInFiles = [osp.join(hubSrcDir, f) for f in hubFiles]
hubOutFiles = [osp.join(hubDir, f) for f in hubFiles]

##
# inputs (need in multiple places)
##
asmSeqs = osp.join(asmHubDir, asmName + ".seqs")
centroRegionBeds = glob.glob(osp.join(asmSrcDir, "chr*/cen*_entireALR.bed"))
contigs = list(fileOps.readFileLines(asmSeqs))

##
# results
##
asmTwoBit = osp.join(asmHubDir, asmName + ".2bit")
asmSizes = osp.join(asmHubDir, asmName + ".sizes")
centroRegionsBigBed = osp.join(asmHubDir, "centroRegions.bigBed")
rmskBigBed = osp.join(asmHubDir, "rmsk.bigBed")

allResults = [asmTwoBit, asmSizes, centroRegionsBigBed,
              rmskBigBed] + hubOutFiles

##
# misc defs
##
bedSortCmd = ["sort", "-k1,1", "-k2,2n"]
binDir = "../../bin"
fixTigWithRangeBedCmd = osp.join(binDir, "fixTigWithRangeBed")

###
# rule that drives everything
###

rule all:
    input: allResults

rule clean:
    run:
        fileOps.rmFiles(*allResults)



###
# genome file
###
genomeFasta = osp.join(asmSrcDir, "chm13_hicanu_hifi_20k.fasta")

rule genomeSeqs:
    input: genomeFasta, centroRegionBeds, asmSeqs
    output: asmTwoBit, asmSizes
    run:
        pipettor.run([("faSomeRecords", genomeFasta, asmSeqs, "/dev/stdout"),
                      ("faToTwoBit", "/dev/stdin", asmTwoBit)])
        pipettor.run(["twoBitInfo", asmTwoBit, asmSizes])


###
# copy hub files
###
rule hubText:
    input: hubInFiles
    output: hubOutFiles
    run:
        for i in range(len(input)):
            shutil.copyfile(input[i], output[i])

###
# centromere region track
###
rule centroRegionsTrack:
    input: centroRegionBeds, asmSizes
    output: centroRegionsBigBed
    run:
        with tempfile.NamedTemporaryFile() as bedFh:
            pipettor.run(bedSortCmd + centroRegionBeds, stdout=bedFh.name)
            pipettor.run(["bedToBigBed", "-tab", bedFh.name, asmSizes, centroRegionsBigBed])


##
# repeat masker
##
rmskDir = osp.join(asmSrcDir, "rm")
rmskOutFiles = [glob.glob(osp.join(rmskDir, tig + ".out/*.fasta.out"))[0]
                for tig in contigs]
rule rmsk:
    input: rmskOutFiles, asmSeqs
    output: rmskBigBed
    run:
        # regions are named in the form tig00018121:0-1387635,
        # but cover the whole contig
        with tempfile.NamedTemporaryFile() as bed1Fh:
            for f in rmskOutFiles:
                bed1Fh.seek(0, 2)
                print("@@@",f)
                pipettor.run(["rmsk2bed"], stdin=f, stdout=bed1Fh)
            with tempfile.NamedTemporaryFile() as bed2Fh:
                pipettor.run([["tawk", '{print $1, $2, $3, $4"/"$11, $5, $6}', bed1Fh.name],
                              [fixTigWithRangeBedCmd],
                              bedSortCmd], stdout=bed2Fh.name)
                pipettor.run(["bedToBigBed", "-tab", bed2Fh.name, asmSizes, rmskBigBed])
